<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   width="49"
   height="49"
   viewBox="0 0 49 49"
   fill="none"
   version="1.1"
   id="svg11"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns:xhtml="http://www.w3.org/1999/xhtml">
  <xhtml:script>(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName(&quot;parsererror&quot;).length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</xhtml:script>
  <path
     d="M0.368464 28.214C0.368464 28.3163 0.399169 28.4187 0.41964 28.5108C2.28243 38.4001 10.1942 46.1599 20.1632 47.7877C20.2246 47.7979 20.2758 47.8081 20.3372 47.8184C21.5449 48.0026 22.7936 48.105 24.0525 48.105C37.3172 48.105 48.105 37.3149 48.105 24.0474C48.105 19.9525 47.0713 16.1033 45.2699 12.7249C45.2187 12.2847 44.9935 11.865 44.6148 11.5784C40.3877 4.64773 32.7524 0 24.0525 0C10.7878 0 0 10.7901 0 24.0576C0 25.4704 0.133056 26.8626 0.368464 28.214ZM4.73886 31.3159L12.2719 35.0832L10.5217 39.6183C7.96292 37.3866 5.95683 34.5406 4.73886 31.3056V31.3159ZM34.7073 35.3494L32.0257 32.6262L33.3562 30.7016L34.7073 35.3494ZM34.0113 42.1367L27.645 38.9529L30.0503 35.4824L35.6284 41.1539C35.1064 41.5122 34.564 41.8398 34.0113 42.1469V42.1367ZM29.5897 30.1386L21.1457 21.5597L26.6011 7.40156L32.1382 26.4634L29.5999 30.1386H29.5897ZM27.6143 32.9948L24.5643 37.3968L16.5809 33.4043L19.7947 25.0506L27.6041 32.9845L27.6143 32.9948ZM22.5991 40.2325L19.8152 44.2456C17.5123 43.7644 15.3424 42.8942 13.3875 41.7067L15.3527 36.6085L22.5991 40.2325ZM23.6738 44.6858L25.6901 41.7784L29.8558 43.8668C28.0237 44.3991 26.0791 44.696 24.073 44.696C23.9399 44.696 23.8069 44.696 23.6738 44.696V44.6858ZM39.0981 38.1851L35.8741 27.0776L43.2433 16.4411C44.185 18.7957 44.707 21.3652 44.707 24.0576C44.707 29.5141 42.5678 34.4894 39.0981 38.1851ZM41.4829 12.9911L34.6458 22.8496L29.1701 4.05397C34.3081 5.37458 38.6785 8.63003 41.4624 12.9911H41.4829ZM24.0525 3.41925C24.1856 3.41925 24.3186 3.41925 24.4517 3.41925L18.4948 18.8776L9.34466 9.59234C13.0907 5.78407 18.3004 3.41925 24.0525 3.41925ZM7.15434 12.2336L17.154 22.389L13.5001 31.8789L3.62323 26.9343C3.49017 25.9925 3.41853 25.0404 3.41853 24.0576C3.41853 19.6556 4.80027 15.5812 7.15434 12.2336Z"
     fill="url(#paint0_linear_8_164)"
     id="path2" />
  <defs
     id="defs9">
    <linearGradient
       id="paint0_linear_8_164"
       x1="36.9378"
       y1="6.13584"
       x2="13.9897"
       y2="48.105"
       gradientUnits="userSpaceOnUse">
      <stop
         stop-color="#17EA13"
         id="stop4" />
      <stop
         offset="1"
         stop-color="#00C2FF"
         id="stop6" />
    </linearGradient>
  </defs>
</svg>
